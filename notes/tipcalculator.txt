1) Android apps have four types of executable components - activities,services,content providers
   and broadcast receivers.
2) In this app we will discuss about activities which are defined as subclasses of Activity
   (package android.app).An app can have many activities, one of which is the first you see after launching the
   app. You interact with Activity through views - GUI components that inherit from class View (package android.view).
3) An activity can manage multiple Fragments. On a phone, each Fragment typically occupies the entire screen and the
   Activity switches between fragments based on user interactions. On a tablet, activities typically display multiple
   fragments per screen to take advantage of the larger screen size.


   -----------------------------------------------------------------------------------------------------

   Activity Lifecycle methods

   Throughout its life, an Activity can be in one of the several states - active (i.e. running,paused or stopped).
   The activity transitions between these states in response to various events:

   1) An active Activity is visible on the screen and has the focus - that is it is in the foreground. You can interact
      with the activity currently in the foreground.
   2) A paused Activity is visible on the screen but does not have the focus - such as when an alertdialog is displayed.
      You cannot interact with the paused activity until it becomes active - for example, after the user dismisses the
      dialog.
   3) A stopped activity is not visible on the screen - it is in the background and is likely to be killed by the system
      when its memory is needed. An activity is stopped when another activity enters the foreground and becomes active.
      For example, when you answer a phone call,the phone app becomes active and the app you previously used is stopped.

   As an activity transitions among these states, the Android runtime calls various Activity lifecycle methods - all of which are
   defined by the Activity class in package android.app
   You will override the onCreate method in every activity.This method is called by the Android runtime when an Activity is starting -
   that is, when its GUI is about to be displayed so you can interact with the activity. Other lifecycle methods include onStart,onPause,
   onRestart,onResume,onStop and onDestroy. Each activity lifecycle method you override must call the superclass's version;otherwise
   an exception will occur. This is required because each lifecycle method in superclass Activity contains code that must execute in addition to the
   code you define in your overriden lifecycle methods.

-------------------------------------------------------------------------------------------------------------------------

An EditText - often called a text box or text field in other GUI technologies is a subclass of TextView that can display Text and accept
text input from the user. You will specify an EditText for numeric input,allow users to enter only digits and restrict the maximum digits that
can be entered.

A SeekBar represents an integer in the range 0 - 100 by default and allows the user to select a number in that range by moving the SeekBar's thumb.
You will customise the SeekBar so that the user can choose a tip percentage from the more limited range 0 to 30.

You will use the class NumberFormat (package java.text) to create local-specific currency and percentage strings - an important part of
internationalising the apps. You also can add accessibility strings and internationalise the app's other text.

-------------------------------------------------------------------------------------------------------------------------

To respond to events when the user changes the text in this app's EditText, you will use an anonymous inner class to implement the TextWatcher interface
(from package android.text). In particular, you will use the method on TextChanged to display the currency-formatted bill amount and to calculate the tip
and total as the user enters each digit.

You will also use another anonymous inner class to implement the SeekBar.OnSeekBarChangeListener interface (from package android.widget) to respond to the user
moving the SeekBar's thumb. In particular, you will use the method onProgressChanged to display the selected tip percentage and to calculate the tip and total
as the user moves the SeekBar's thumb.

-------------------------------------------------------------------------------------------------------------------------

A theme gives an app look-and-feel that's consistent with Android. Projects that you create for Android 5 and higher use themes that adhere to the Google's material design
guidelines. There are several predefined material design themes:

1) The "light" theme has a white app bar, a white app background and text that is black or shades of dark grey.
2) The "light" theme with a dark app bar is the same as above, but the app bar is black with white text by default.
3) The "dark" theme has a black app bar, a dark gray app background and text that is white or shades of light grey.

For each of these themes there is a

1) A Theme.Material version (example Theme.Material.Light) for apps that do not use any AppCompat libraries and run on
   Android 5 or higher.
2) A Theme.AppCompat version (example Theme.AppCompat.Light) for apps that use AppCompat libraries and run on Android 2.1 or higher.

When designing a GUI, you can choose from the predefined themes, or even create new ones. In this chapter, we will use
Theme.AppCompat.Light.DarkActionBAr,which is the default theme in Android studio's app templates.  Apps that use the AppCompat
libraries must use one of the AppCompat themes; otherwise some views will not render correctly.

-----------------------------------------------------------------------------------------------------------------------------
Google's material design guidelines recommend that objects in your user interfaces cast shadows just as real-world objects do.
When you set a view's elevation property, Android automatically casts a shadow for that view. Larger elevation values means
pronounced shadows. For this app, we will set the elevation of the blue and orange TextViews that display monetary amounts.

The material design guidelines contain elevation recommendations for various onscreen components - for example, a dialog's
elevation is 24dp and a menu's is 8dp.
-----------------------------------------------------------------------------------------------------------------------------
App developer's often customise a theme's colors to match a company's branding. If you need to customise theme colors, Google's
material design guidelines for color recommendation that you choose a color palette consisting of a primary color - with no
more than three hues (shades) and an accent color. The primary colors typically are used to color the status bar and the app
bar at the top of the screen and can also be used in your GUI. The accent color is used to tint variuos views in your GUI, such
as SeekBars,CheckBoxes and RadioButtions. Once you choose a palette, you can choose Android Studio's Theme Editor to modify a
theme's colors.
